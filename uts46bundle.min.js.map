{
  "version": 3,
  "sources": ["node_modules/punycode/punycode.js", "idna-map.min.js", "uts46.min.js"],
  "sourcesContent": ["'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7E]/; // non-ASCII chars\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, fn) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = fn(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {Array} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(string, fn) {\n\tconst parts = string.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tstring = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tstring = string.replace(regexSeparators, '\\x2E');\n\tconst labels = string.split('.');\n\tconst encoded = map(labels, fn).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = array => String.fromCodePoint(...array);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint - 0x30 < 0x0A) {\n\t\treturn codePoint - 0x16;\n\t}\n\tif (codePoint - 0x41 < 0x1A) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint - 0x61 < 0x1A) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tlet oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tlet inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tlet basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue == n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.1.0',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nmodule.exports = punycode;\n", "", "!function(t,n){\"function\"==typeof define&&define.amd?define([\"punycode\",\"./idna-map.min\"],(function(t,e){return n(t,e)})):\"object\"==typeof exports?module.exports=n(require(\"punycode/\"),require(\"./idna-map.min\")):t.uts46=n(t.punycode,t.idna_map)}(this,(function(t,n){function e(e,r,i){const o=[],a=t.ucs2.decode(e);for(let e=0;e<a.length;e++){const s=a[e],c=t.ucs2.encode([a[e]]),u=n.mapChar(s),l=u>>23,d=u>>21&3,h=u>>5&65535,f=31&u,p=n.mapStr.substr(h,f);if(0===d||r&&1&l)throw new Error(\"Illegal char \"+c);1===d?o.push(p):2===d?o.push(i?p:c):3===d&&o.push(c)}return o.join(\"\").normalize(\"NFC\")}function r(n,r,o){void 0===o&&(o=!1);let a=e(n,o,r).split(\".\");return a=a.map((function(n){return n.startsWith(\"xn--\")?i(n=t.decode(n.substring(4)),o,!1):i(n,o,r),n})),a.join(\".\")}function i(t,r,i){if(\"-\"===t[2]&&\"-\"===t[3])throw new Error(\"Failed to validate \"+t);if(t.startsWith(\"-\")||t.endsWith(\"-\"))throw new Error(\"Failed to validate \"+t);if(t.includes(\".\"))throw new Error(\"Failed to validate \"+t);if(e(t,r,i)!==t)throw new Error(\"Failed to validate \"+t);const o=t.codePointAt(0);if(n.mapChar(o)&2<<23)throw new Error(\"Label contains illegal character: \"+o)}function o(n,e){void 0===e&&(e={});const i=!(\"transitional\"in e)||e.transitional,o=\"useStd3ASCII\"in e&&e.useStd3ASCII,a=\"verifyDnsLength\"in e&&e.verifyDnsLength,s=r(n,i,o).split(\".\").map(t.toASCII),c=s.join(\".\");let u;if(a){if(c.length<1||c.length>253)throw new Error(\"DNS name has wrong length: \"+c);for(u=0;u<s.length;u++){const t=s[u];if(t.length<1||t.length>63)throw new Error(\"DNS label has wrong length: \"+t)}}return c}function a(t,n){void 0===n&&(n={});return r(t,!1,\"useStd3ASCII\"in n&&n.useStd3ASCII)}return{toUnicode:a,toAscii:o,convert:function(t){const n=Array.isArray(t);n||(t=[t]);const e={IDN:[],PC:[]};return t.forEach((t=>{let n,r;try{n=o(t,{transitional:!t.match(/\\.(?:be|ca|de|fr|pm|re|swiss|tf|wf|yt)\\.?$/)}),r={PC:n,IDN:a(n)}}catch(n){r={PC:t,IDN:t}}e.PC.push(r.PC),e.IDN.push(r.IDN)})),n?e:{IDN:e.IDN[0],PC:e.PC[0]}}}}));"],
  "mappings": "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",
  "names": ["require_punycode", "__commonJSMin", "exports", "module", "delimiter", "regexPunycode", "regexNonASCII", "regexSeparators", "errors", "baseMinusTMin", "floor", "stringFromCharCode", "error", "type", "map", "array", "fn", "result", "length", "mapDomain", "string", "parts", "labels", "encoded", "ucs2decode", "output", "counter", "value", "extra", "ucs2encode", "basicToDigit", "codePoint", "digitToBasic", "digit", "flag", "adapt", "delta", "numPoints", "firstTime", "k", "decode", "input", "inputLength", "i", "n", "bias", "basic", "j", "index", "oldi", "w", "t", "baseMinusT", "out", "encode", "currentValue", "basicLength", "handledCPCount", "m", "handledCPCountPlusOne", "q", "qMinusT", "toUnicode", "toASCII", "punycode", "require_idna_map_min", "__commonJSMin", "require_uts46_min", "__commonJSMin", "exports", "module", "t", "e", "r", "i", "o", "a", "s", "c", "u", "l", "d", "h", "f", "p", "n"]
}
